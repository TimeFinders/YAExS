/*

ZIMPL NOTES

http://zimpl.zib.de/download/zimpl.pdf


zimpl is a LGPL modeling language. You build a model model.zpl file, a data file data.zpl, then run zimpl to convert this to MPS or LP format.

A typical invocation of ZIMPL is for example:
zimpl -o solveme -t mps data.zpl model.zpl

or
zimpl -t mps roughZIMPLmodel.zpl

Creates solve.mps and solveme.tbl. The tbl is a table file which lists all variable and constraint names used in the model and their corresponding names in the problem file.

ZIMPL can make mps or lp files. lp files tend to be smaller and more readable.




#
Each ZPL file can consists of six types of statements:
◮ Sets
◮ Parameters
◮ Variables
◮ Objective
◮ Constraints
◮ Function definitions

sum over a set: sum(s in S) e(s)
ord(A,n,c) takes the c-th component of the n-th element of set A.

combinations of boolean expressions with and or and xor and negation are NOT possible

a tuple is an ordered vector of fixed dimension where each component is either a number or a string. defintion is enclosed in angle brackets, e.g. <1,2,"x">
a set consists of tuples. each tuple is unique within a set.
set A = {1,2,3};
<1,b> in S will only get those tuples whose first component is 1 (b is a variable?)
set D:= A cross B;
set E:= {6 to 9} union A without {2,3};
etc.
set F:= { <i,j> in Q with i>j and i < 5}
you can also index sets.

load the values for a set or a parameter from a file
read filename as template [skip n] [use n] [match s] [comment s

Filename is the name of the file to read. template is a string with a template for the
tuples to generate. Each input line from the file is split into fields. The splitting is done
according to the following rules: Whenever a space, tab, comma, semicolon or colon is
encountered a new field is started. Text that is enclosed in double quotes is not split
and the quotes are always removed. When a field is split all space and tab 
charactersaround the splitting point are removed. If the split is due to a comma, semicolon or
colon, each occurrence of these characters starts a new field.

example:
 param a[{1..4}*{1..3}] := read "matrix.dat" as "n+" comment "#";

# more examples on page 12


WARM STARTING:
It is possible to specify initial values for integer variables by use of the startval keyword. Furthermore, the branching priority can be given using the priority keyword. Currently these values are written to a CPLEXord branching order file if the -r command line switch is given.


*/